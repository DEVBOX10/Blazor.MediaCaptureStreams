@page "/video"
@inject IMediaDevicesService MediaDevicesService
@inject IJSRuntime JSRuntime

<PageTitle>Media Capture and Streams - Video Capture</PageTitle>

<h2>Video Capture</h2>

<p>Here we open a video track with the constraint of having a 21/9 aspect ration and show it in a <code>video</code> tag.</p>

@if (error is { } errorMessage)
{
    <p style="color: red;">@errorMessage</p>
}
else if (mediaStream is null)
{
    <button class="btn btn-primary" @onclick="LoadMediaStream">Load Camera</button>
}
else
{
    <video @ref="videoElement" width="100%" height="500" autoplay controls></video>
}

@code {
    private MediaStream? mediaStream;
    private string? error;
    private ElementReference videoElement;

    async Task LoadMediaStream()
    {
        try
        {
            var mediaDevices = await MediaDevicesService.GetMediaDevicesAsync();
            var mediaTrackConstraints = new MediaTrackConstraints()
            {
                AspectRatio = 21.0/9.0,
            };
            mediaStream = await mediaDevices.GetUserMediaAsync(new MediaStreamConstraints() { Video = mediaTrackConstraints } );
            StateHasChanged();
            // We don't have a wrapper for HtmlMediaElement's yet so we use simple JSInterop for this part.
            var htmlMediaElement = await JSRuntime.InvokeAsync<IJSObjectReference>("getReference", videoElement);
            await JSRuntime.InvokeVoidAsync("setAttribute", htmlMediaElement, "srcObject", mediaStream.JSReference);
        }
        catch
        {
            error = "Could not load video track.";
        }
    }
}