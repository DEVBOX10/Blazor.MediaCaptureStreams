@page "/video"
@using KristofferStrube.Blazor.MediaCaptureStreams.Exceptions;
@using KristofferStrube.Blazor.WebIDL.Exceptions;
@implements IAsyncDisposable
@inject IMediaDevicesService MediaDevicesService
@inject IJSRuntime JSRuntime

<PageTitle>Media Capture and Streams - Video Capture</PageTitle>

<h2>Video Capture</h2>

<p>Here we open a video track with the constraint of having a 16:9 aspect ratio and show it in a <code>video</code> tag.</p>
<p>After it has been opened we make it possible to choose other devices that are of the kind <code>videoinput</code>.</p>
<p>We can also adjust the frame rate and potentially set it outside the range of the capabilities of your device which will throw an <code>OverconstrainedErrorException</code> that we can catch.</p>

@if (error is { } errorMessage)
{
    <p style="color: red;">@errorMessage</p>
}
@if (mediaStream is null)
{
    <button class="btn btn-primary" @onclick="OpenVideo">Load Camera</button>
}
else
{
    @if (videoOptions.Count > 0)
    {
        <label for="videoSource">Video Source</label>
        <select id="videoSource" @bind=selectedVideoSource @bind:after="LoadMediaStream">
            @foreach (var option in videoOptions)
            {
                <option value="@option.id" selected="@(option.id == selectedVideoSource)">@option.label</option>
            }
        </select>
        <br />
        <label for="frameRate">Frame Rate (Current Camera Capabilites are @minimalFrameRate - @maximumFrameRate)</label>
        <input id="frameRate" type="number" step="1" @bind="frameRate" @bind:after="LoadMediaStream" />
    }
    <video @ref="videoElement" width="100%" height="400" autoplay controls></video>
}

@code {
    private MediaDevices mediaDevices = default!;
    private MediaStream? mediaStream;
    private string? error;
    private ElementReference videoElement;
    private List<(string label, string id)> videoOptions = new();
    private string? selectedVideoSource;
    private double? frameRate;
    private double minimalFrameRate;
    private double maximumFrameRate;

    protected override async Task OnInitializedAsync()
    {
        mediaDevices = await MediaDevicesService.GetMediaDevicesAsync();
    }

    async Task OpenVideo()
    {
        try
        {
            await LoadMediaStream();

            if (mediaStream is null) return;

            var deviceInfos = await mediaDevices.EnumerateDevicesAsync();
            videoOptions.Clear();
            foreach (var device in deviceInfos)
            {
                if (await device.GetKindAsync() is MediaDeviceKind.VideoInput)
                {
                    videoOptions.Add((await device.GetLabelAsync(), await device.GetDeviceIdAsync()));
                }
            }

            var videoTrack = (await mediaStream.GetVideoTracksAsync()).FirstOrDefault();
            if (videoTrack is not null)
            {
                if (await videoTrack.GetCapabilitiesAsync() is { } capabilities)
                {
                    selectedVideoSource = capabilities.DeviceId;
                }
            }
        }
        catch (WebIDLException ex)
        {
            error = $"{ex.GetType().Name}: {ex.Message}";
        }
        catch (Exception ex)
        {
            error = $"{ex.GetType().Name}: {ex.Message}";
        }
    }

    async Task LoadMediaStream()
    {
        await StopVideoTrack();

        try
        {
            var mediaTrackConstraints = new MediaTrackConstraints()
                {
                    AspectRatio = 16.0 / 9.0,
                    FrameRate = frameRate is { } setFrameRate ? new ConstrainDoubleRange() { Exact = setFrameRate } : frameRate,
                    DeviceId = selectedVideoSource is null ? null : new ConstrainDomString(selectedVideoSource)
                };
            mediaStream = await mediaDevices.GetUserMediaAsync(new MediaStreamConstraints() { Video = mediaTrackConstraints });

            var videoTrack = (await mediaStream.GetVideoTracksAsync()).FirstOrDefault();
            if (videoTrack is not null)
            {
                var capabilities = await videoTrack.GetCapabilitiesAsync();
                minimalFrameRate = capabilities.FrameRate?.Min ?? 0;
                maximumFrameRate = capabilities.FrameRate?.Max ?? 0;
                if (frameRate is null)
                {
                    frameRate = (maximumFrameRate + minimalFrameRate) / 2.0;
                }
            }

            StateHasChanged();
            // We don't have a wrapper for HtmlMediaElement's yet so we use simple JSInterop for this part.
            var htmlMediaElement = await JSRuntime.InvokeAsync<IJSObjectReference>("getReference", videoElement);
            await JSRuntime.InvokeVoidAsync("setAttribute", htmlMediaElement, "srcObject", mediaStream.JSReference);
        }
        catch (OverconstrainedErrorException ex)
        {
            error = $"The following constraint was overconstrained: {ex.Constraint}";
            frameRate = null;
            await StopVideoTrack();
        }
    }

    async Task StopVideoTrack()
    {
        if (mediaStream is null) return;
        var videoTrack = (await mediaStream.GetVideoTracksAsync()).FirstOrDefault();
        if (videoTrack is not null)
        {
            await videoTrack.StopAsync();
        }
        mediaStream = null;
    }

    public async ValueTask DisposeAsync()
    {
        await StopVideoTrack();
    }
}