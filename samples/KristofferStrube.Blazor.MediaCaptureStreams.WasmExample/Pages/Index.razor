@page "/"
@inject IMediaDevicesService MediaDevicesService

<PageTitle>Media Capture and Streams - Load Devices</PageTitle>

<h2>On this page we try to load the available media devices in your browser.</h2>


@if (error is { } errorMessage)
{
    <p style="color: red;">@errorMessage</p>
}
else if (mediaStream is null)
{
    <button class="btn btn-primary" @onclick="LoadMediaStream">Load MediaStream</button>
}
else
{
    <h3>MediaStream</h3>
    <p>
        Active: @active<br />
        Id: @id
    </p>
}
@if (tracks is { Length: > 0 })
{
    <h3>Tracks:</h3>
    @foreach (var trackInfo in tracks)
    {
        var mediaStreamTrack = trackInfo.track;
        <div>
            <b>@trackInfo.kind</b> : @trackInfo.label (@trackInfo.id): <button class="btn bg-warning" @onclick="() => RemoveAsync(mediaStreamTrack)">Stop and Remove</button>
        </div>
    }
}

@code {
    private MediaStream? mediaStream;
    private bool active;
    private string id = string.Empty;
    private (MediaStreamTrackKind kind, string label, string id, MediaStreamTrack track)[]? tracks;
    private string? error;

    async Task LoadMediaStream()
    {
        try
        {
            var mediaDevices = await MediaDevicesService.GetMediaDevicesAsync();
            mediaStream = await mediaDevices.GetUserMediaAsync(new MediaStreamConstraints() { Video = true, Audio = true });
            id = await mediaStream.GetIdAsync();
            await LoadTracksAsync();
        }
        catch
        {
            error = "Could not load media devices";
        }
    }

    async Task LoadTracksAsync()
    {
        if (mediaStream is null) return;
        tracks = await Task.WhenAll((await mediaStream.GetTracksAsync()).Select(async track => (kind: await track.GetKindAsync(), label: await track.GetLabelAsync(), id: await track.GetIdAsync(), track)));
        active = await mediaStream.GetActiveAsync();
    }

    async Task RemoveAsync(MediaStreamTrack track)
    {
        if (mediaStream is null) return;
        await track.StopAsync();
        await mediaStream.RemoveTrackAsync(track);
        await LoadTracksAsync();
    }
}